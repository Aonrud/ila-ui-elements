/*! ILA UI Elements
 *Copyright (C) 2021-2022 Aonghus Storey
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
!function(t,s){"object"==typeof exports&&"undefined"!=typeof module?s(exports):"function"==typeof define&&define.amd?define(["exports"],s):s((t="undefined"!=typeof globalThis?globalThis:t||self).ila={})}(this,(function(t){"use strict";const s={leftButtonClass:"scroller-left btn btn-scroller",rightButtonClass:"scroller-right btn btn-scroller",leftButtonContent:"←",rightButtonContent:"→",breakpoints:[[0,4],[768,4],[992,6],[1200,8]]};t.Scroller=class{constructor(t,i={}){this.t=t,this.i=function(t,s){let i={};for(const h in t)s.hasOwnProperty(h)?i[h]=s[h]:i[h]=t[h];return i}(s,i),this.h(),this.o=null,this.l>this.u&&this.create()}create(){if(this.t.parentNode==this.p&&"hidden"==this.p.style.overflow)return;const t='<button class="'+this.i.leftButtonClass+' disabled">'+this.i.leftButtonContent+'</button><button class="'+this.i.rightButtonClass+'">'+this.i.rightButtonContent+"</button>";this.g(),this.p.style.overflow="hidden",this.p.insertAdjacentHTML("beforeend",t),this.p.addEventListener("click",(t=>this._(t))),window.addEventListener("resize",(t=>this.$())),this.m=this.p.querySelector(".scroller-left"),this.v=this.p.querySelector(".scroller-right"),this.t.style.left="0px",this.m.disabled=!0,this.m.classList.add("disabled")}$(){clearTimeout(this.o),this.o=setTimeout(this.h(),1e3)}destroy(){this.t.style.left="0px",this.m.remove(),this.v.remove(),window.removeEventListener("resize",this.$),this.B()}scrollLeft(){const t=parseInt(this.t.style.left);let s=t+this.C;this.v.classList.contains("disabled")&&(s=t+this.I%this.C),s>=0&&(s=0,this.m.disabled=!0,this.m.classList.add("disabled")),this.t.style.left=s+"px",this.v.disabled=!1,this.v.classList.remove("disabled"),console.log(`Moving from ${t} to ${s}`)}scrollRight(){const t=parseInt(this.t.style.left);let s=t-this.C;s<-this.I&&(s=-this.I,this.v.disabled=!0,this.v.classList.add("disabled")),this.t.style.left=s+"px",this.m.disabled=!1,this.m.classList.remove("disabled"),console.log(`Moving from ${t} to ${s}`)}g(){const t=document.createElement("div");t.classList.add("scroller-wrapper"),this.t.parentNode.insertBefore(t,this.t),t.append(this.t),this.p=t,this.h()}B(){this.p.parentNode.insertBefore(this.t,this.p.previousSibling),this.p.remove()}h(){const t=window.innerWidth,s=this.k(t,this.i.breakpoints);this.M(s);let i=window.getComputedStyle(this.t);const h=parseInt(i.getPropertyValue("padding-left"))+parseInt(i.getPropertyValue("padding-right"));this.l=this.t.scrollWidth-h,this.u=this.t.offsetWidth-h,this.T=this.t.querySelector("li").offsetWidth,this.j=Math.floor(this.u/this.T),this.C=this.T*this.j,this.I=this.l-this.u,console.log(`Content: ${this.l}; Display: ${this.u}.`)}k(t,s){for(let i=0;i<s.length;i++)if(s[i][0]<=t&&(i==s.length-1||s[i+1][0]>t))return s[i][1]}M(t){if(isNaN(t))throw new Error(`Invalid number provided for row count: ${t}`);console.log(`Setting row count to ${t}`);const s=this.t.querySelectorAll(".scroller li"),i=100/t+"%";for(const t of s)t.style.flexBasis=i}_(t){t.target.classList.contains("scroller-left")&&this.scrollLeft(),t.target.classList.contains("scroller-right")&&this.scrollRight()}},Object.defineProperty(t,"N",{value:!0})}));
